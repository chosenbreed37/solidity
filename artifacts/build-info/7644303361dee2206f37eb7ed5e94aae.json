{
	"id": "7644303361dee2206f37eb7ed5e94aae",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.30",
	"solcLongVersion": "0.8.30+commit.73712a01",
	"input": {
		"language": "Solidity",
		"sources": {
			"units.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\ncontract Units {\r\n    function test() public pure{\r\n        assert(1 minutes == 60 seconds);\r\n        assert(2 hours == 120 minutes);\r\n        assert(1 days == 24 hours);\r\n\r\n        assert(1 ether == 1e18 wei);\r\n        assert(1 ether == 1e9 gwei);\r\n    }\r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"units.sol": {
				"Units": {
					"abi": [
						{
							"inputs": [],
							"name": "test",
							"outputs": [],
							"stateMutability": "pure",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"units.sol\":74:332  contract Units {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  revert(0x00, 0x00)\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"units.sol\":74:332  contract Units {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      revert(0x00, 0x00)\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xf8a8fd6d\n      eq\n      tag_3\n      jumpi\n    tag_2:\n      revert(0x00, 0x00)\n        /* \"units.sol\":96:329  function test() public pure{... */\n    tag_3:\n      tag_4\n      tag_5\n      jump\t// in\n    tag_4:\n      stop\n    tag_5:\n        /* \"units.sol\":154:164  60 seconds */\n      0x3c\n        /* \"units.sol\":141:150  1 minutes */\n      dup1\n        /* \"units.sol\":141:164  1 minutes == 60 seconds */\n      eq\n        /* \"units.sol\":134:165  assert(1 minutes == 60 seconds) */\n      tag_7\n      jumpi\n      tag_8\n      tag_9\n      jump\t// in\n    tag_8:\n    tag_7:\n        /* \"units.sol\":194:205  120 minutes */\n      0x1c20\n        /* \"units.sol\":183:190  2 hours */\n      dup1\n        /* \"units.sol\":183:205  2 hours == 120 minutes */\n      eq\n        /* \"units.sol\":176:206  assert(2 hours == 120 minutes) */\n      tag_10\n      jumpi\n      tag_11\n      tag_9\n      jump\t// in\n    tag_11:\n    tag_10:\n        /* \"units.sol\":234:242  24 hours */\n      0x015180\n        /* \"units.sol\":224:230  1 days */\n      dup1\n        /* \"units.sol\":224:242  1 days == 24 hours */\n      eq\n        /* \"units.sol\":217:243  assert(1 days == 24 hours) */\n      tag_12\n      jumpi\n      tag_13\n      tag_9\n      jump\t// in\n    tag_13:\n    tag_12:\n        /* \"units.sol\":274:282  1e18 wei */\n      0x0de0b6b3a7640000\n        /* \"units.sol\":263:270  1 ether */\n      dup1\n        /* \"units.sol\":263:282  1 ether == 1e18 wei */\n      eq\n        /* \"units.sol\":256:283  assert(1 ether == 1e18 wei) */\n      tag_14\n      jumpi\n      tag_15\n      tag_9\n      jump\t// in\n    tag_15:\n    tag_14:\n        /* \"units.sol\":312:320  1e9 gwei */\n      0x0de0b6b3a7640000\n        /* \"units.sol\":301:308  1 ether */\n      dup1\n        /* \"units.sol\":301:320  1 ether == 1e9 gwei */\n      eq\n        /* \"units.sol\":294:321  assert(1 ether == 1e9 gwei) */\n      tag_16\n      jumpi\n      tag_17\n      tag_9\n      jump\t// in\n    tag_17:\n    tag_16:\n        /* \"units.sol\":96:329  function test() public pure{... */\n      jump\t// out\n        /* \"#utility.yul\":7:187   */\n    tag_9:\n        /* \"#utility.yul\":55:132   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":52:53   */\n      0x00\n        /* \"#utility.yul\":45:133   */\n      mstore\n        /* \"#utility.yul\":152:156   */\n      0x01\n        /* \"#utility.yul\":149:150   */\n      0x04\n        /* \"#utility.yul\":142:157   */\n      mstore\n        /* \"#utility.yul\":176:180   */\n      0x24\n        /* \"#utility.yul\":173:174   */\n      0x00\n        /* \"#utility.yul\":166:181   */\n      revert\n\n    auxdata: 0xa2646970667358221220a81d57251c40789dafc190fea18aea8d98bf04224980abb20e05bab28969426764736f6c634300081e0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600e575f5ffd5b5060ee8061001b5f395ff3fe6080604052348015600e575f5ffd5b50600436106026575f3560e01c8063f8a8fd6d14602a575b5f5ffd5b60306032565b005b603c8014604057603f608b565b5b611c208014604f57604e608b565b5b620151808014605f57605e608b565b5b670de0b6b3a764000080146074576073608b565b5b670de0b6b3a764000080146089576088608b565b5b565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52600160045260245ffdfea2646970667358221220a81d57251c40789dafc190fea18aea8d98bf04224980abb20e05bab28969426764736f6c634300081e0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xE JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0xEE DUP1 PUSH2 0x1B PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xE JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x26 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xF8A8FD6D EQ PUSH1 0x2A JUMPI JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH1 0x30 PUSH1 0x32 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x3C DUP1 EQ PUSH1 0x40 JUMPI PUSH1 0x3F PUSH1 0x8B JUMP JUMPDEST JUMPDEST PUSH2 0x1C20 DUP1 EQ PUSH1 0x4F JUMPI PUSH1 0x4E PUSH1 0x8B JUMP JUMPDEST JUMPDEST PUSH3 0x15180 DUP1 EQ PUSH1 0x5F JUMPI PUSH1 0x5E PUSH1 0x8B JUMP JUMPDEST JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP1 EQ PUSH1 0x74 JUMPI PUSH1 0x73 PUSH1 0x8B JUMP JUMPDEST JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP1 EQ PUSH1 0x89 JUMPI PUSH1 0x88 PUSH1 0x8B JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA8 SAR JUMPI 0x25 SHR BLOCKHASH PUSH25 0x9DAFC190FEA18AEA8D98BF04224980ABB20E05BAB289694267 PUSH5 0x736F6C6343 STOP ADDMOD 0x1E STOP CALLER ",
							"sourceMap": "74:258:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@test_35": {
									"entryPoint": 50,
									"id": 35,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x01": {
									"entryPoint": 139,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:190:1",
										"nodeType": "YulBlock",
										"src": "0:190:1",
										"statements": [
											{
												"body": {
													"nativeSrc": "35:152:1",
													"nodeType": "YulBlock",
													"src": "35:152:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "52:1:1",
																		"nodeType": "YulLiteral",
																		"src": "52:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "55:77:1",
																		"nodeType": "YulLiteral",
																		"src": "55:77:1",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "45:6:1",
																	"nodeType": "YulIdentifier",
																	"src": "45:6:1"
																},
																"nativeSrc": "45:88:1",
																"nodeType": "YulFunctionCall",
																"src": "45:88:1"
															},
															"nativeSrc": "45:88:1",
															"nodeType": "YulExpressionStatement",
															"src": "45:88:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "149:1:1",
																		"nodeType": "YulLiteral",
																		"src": "149:1:1",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "152:4:1",
																		"nodeType": "YulLiteral",
																		"src": "152:4:1",
																		"type": "",
																		"value": "0x01"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "142:6:1",
																	"nodeType": "YulIdentifier",
																	"src": "142:6:1"
																},
																"nativeSrc": "142:15:1",
																"nodeType": "YulFunctionCall",
																"src": "142:15:1"
															},
															"nativeSrc": "142:15:1",
															"nodeType": "YulExpressionStatement",
															"src": "142:15:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "173:1:1",
																		"nodeType": "YulLiteral",
																		"src": "173:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "176:4:1",
																		"nodeType": "YulLiteral",
																		"src": "176:4:1",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "166:6:1",
																	"nodeType": "YulIdentifier",
																	"src": "166:6:1"
																},
																"nativeSrc": "166:15:1",
																"nodeType": "YulFunctionCall",
																"src": "166:15:1"
															},
															"nativeSrc": "166:15:1",
															"nodeType": "YulExpressionStatement",
															"src": "166:15:1"
														}
													]
												},
												"name": "panic_error_0x01",
												"nativeSrc": "7:180:1",
												"nodeType": "YulFunctionDefinition",
												"src": "7:180:1"
											}
										]
									},
									"contents": "{\n\n    function panic_error_0x01() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x01)\n        revert(0, 0x24)\n    }\n\n}\n",
									"id": 1,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052348015600e575f5ffd5b50600436106026575f3560e01c8063f8a8fd6d14602a575b5f5ffd5b60306032565b005b603c8014604057603f608b565b5b611c208014604f57604e608b565b5b620151808014605f57605e608b565b5b670de0b6b3a764000080146074576073608b565b5b670de0b6b3a764000080146089576088608b565b5b565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52600160045260245ffdfea2646970667358221220a81d57251c40789dafc190fea18aea8d98bf04224980abb20e05bab28969426764736f6c634300081e0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xE JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x26 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xF8A8FD6D EQ PUSH1 0x2A JUMPI JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH1 0x30 PUSH1 0x32 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x3C DUP1 EQ PUSH1 0x40 JUMPI PUSH1 0x3F PUSH1 0x8B JUMP JUMPDEST JUMPDEST PUSH2 0x1C20 DUP1 EQ PUSH1 0x4F JUMPI PUSH1 0x4E PUSH1 0x8B JUMP JUMPDEST JUMPDEST PUSH3 0x15180 DUP1 EQ PUSH1 0x5F JUMPI PUSH1 0x5E PUSH1 0x8B JUMP JUMPDEST JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP1 EQ PUSH1 0x74 JUMPI PUSH1 0x73 PUSH1 0x8B JUMP JUMPDEST JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP1 EQ PUSH1 0x89 JUMPI PUSH1 0x88 PUSH1 0x8B JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA8 SAR JUMPI 0x25 SHR BLOCKHASH PUSH25 0x9DAFC190FEA18AEA8D98BF04224980ABB20E05BAB289694267 PUSH5 0x736F6C6343 STOP ADDMOD 0x1E STOP CALLER ",
							"sourceMap": "74:258:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;96:233;;;:::i;:::-;;;154:10;141:9;:23;134:31;;;;:::i;:::-;;194:11;183:7;:22;176:30;;;;:::i;:::-;;234:8;224:6;:18;217:26;;;;:::i;:::-;;274:8;263:7;:19;256:27;;;;:::i;:::-;;312:8;301:7;:19;294:27;;;;:::i;:::-;;96:233::o;7:180:1:-;55:77;52:1;45:88;152:4;149:1;142:15;176:4;173:1;166:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "47600",
								"executionCost": "97",
								"totalCost": "47697"
							},
							"external": {
								"test()": "236"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 74,
									"end": 332,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 74,
									"end": 332,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 74,
									"end": 332,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 74,
									"end": 332,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 74,
									"end": 332,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 74,
									"end": 332,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 74,
									"end": 332,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 74,
									"end": 332,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 74,
									"end": 332,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 74,
									"end": 332,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 74,
									"end": 332,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 74,
									"end": 332,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 74,
									"end": 332,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 74,
									"end": 332,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 74,
									"end": 332,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 74,
									"end": 332,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 74,
									"end": 332,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 74,
									"end": 332,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 74,
									"end": 332,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 74,
									"end": 332,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 74,
									"end": 332,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220a81d57251c40789dafc190fea18aea8d98bf04224980abb20e05bab28969426764736f6c634300081e0033",
									".code": [
										{
											"begin": 74,
											"end": 332,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 74,
											"end": 332,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 74,
											"end": 332,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 74,
											"end": 332,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 74,
											"end": 332,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 74,
											"end": 332,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 74,
											"end": 332,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 74,
											"end": 332,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 74,
											"end": 332,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 74,
											"end": 332,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 74,
											"end": 332,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 74,
											"end": 332,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 74,
											"end": 332,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 74,
											"end": 332,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 74,
											"end": 332,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 74,
											"end": 332,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 74,
											"end": 332,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 74,
											"end": 332,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 74,
											"end": 332,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 74,
											"end": 332,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 74,
											"end": 332,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 74,
											"end": 332,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 74,
											"end": 332,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 74,
											"end": 332,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 74,
											"end": 332,
											"name": "PUSH",
											"source": 0,
											"value": "F8A8FD6D"
										},
										{
											"begin": 74,
											"end": 332,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 74,
											"end": 332,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 74,
											"end": 332,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 74,
											"end": 332,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 74,
											"end": 332,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 74,
											"end": 332,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 74,
											"end": 332,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 74,
											"end": 332,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 96,
											"end": 329,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 96,
											"end": 329,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 96,
											"end": 329,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 96,
											"end": 329,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 96,
											"end": 329,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 96,
											"end": 329,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 96,
											"end": 329,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 96,
											"end": 329,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 96,
											"end": 329,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 96,
											"end": 329,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 154,
											"end": 164,
											"name": "PUSH",
											"source": 0,
											"value": "3C"
										},
										{
											"begin": 141,
											"end": 150,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 141,
											"end": 164,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 134,
											"end": 165,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 134,
											"end": 165,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 134,
											"end": 165,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 134,
											"end": 165,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 134,
											"end": 165,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 134,
											"end": 165,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 134,
											"end": 165,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 134,
											"end": 165,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 134,
											"end": 165,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 194,
											"end": 205,
											"name": "PUSH",
											"source": 0,
											"value": "1C20"
										},
										{
											"begin": 183,
											"end": 190,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 183,
											"end": 205,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 176,
											"end": 206,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 176,
											"end": 206,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 176,
											"end": 206,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 176,
											"end": 206,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 176,
											"end": 206,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 176,
											"end": 206,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 176,
											"end": 206,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 176,
											"end": 206,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 176,
											"end": 206,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 234,
											"end": 242,
											"name": "PUSH",
											"source": 0,
											"value": "15180"
										},
										{
											"begin": 224,
											"end": 230,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 224,
											"end": 242,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 217,
											"end": 243,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 217,
											"end": 243,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 217,
											"end": 243,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 217,
											"end": 243,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 217,
											"end": 243,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 217,
											"end": 243,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 217,
											"end": 243,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 217,
											"end": 243,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 217,
											"end": 243,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 274,
											"end": 282,
											"name": "PUSH",
											"source": 0,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 263,
											"end": 270,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 263,
											"end": 282,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 256,
											"end": 283,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 256,
											"end": 283,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 256,
											"end": 283,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 256,
											"end": 283,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 256,
											"end": 283,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 256,
											"end": 283,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 256,
											"end": 283,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 256,
											"end": 283,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 256,
											"end": 283,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 312,
											"end": 320,
											"name": "PUSH",
											"source": 0,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 301,
											"end": 308,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 301,
											"end": 320,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 294,
											"end": 321,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 294,
											"end": 321,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 294,
											"end": 321,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 294,
											"end": 321,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 294,
											"end": 321,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 294,
											"end": 321,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 294,
											"end": 321,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 294,
											"end": 321,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 294,
											"end": 321,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 96,
											"end": 329,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7,
											"end": 187,
											"name": "tag",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 7,
											"end": 187,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 55,
											"end": 132,
											"name": "PUSH",
											"source": 1,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 52,
											"end": 53,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 45,
											"end": 133,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 152,
											"end": 156,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 149,
											"end": 150,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 142,
											"end": 157,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 176,
											"end": 180,
											"name": "PUSH",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 173,
											"end": 174,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 166,
											"end": 181,
											"name": "REVERT",
											"source": 1
										}
									]
								}
							},
							"sourceList": [
								"units.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"test()": "f8a8fd6d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"test\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"units.sol\":\"Units\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"units.sol\":{\"keccak256\":\"0xf076c4c623996fd5f337f602881f9cc31c33456dddc463baf33687a639e7e6f3\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://c26d7ab5ff5aad32c00b2b6d5e93436545d0dcfe228ea1a1e2226f9a365c6dae\",\"dweb:/ipfs/QmY1Cn4GueuQTeajeKchtJWAeEKwXskCR3zuEseSEMnxTf\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"units.sol": {
				"ast": {
					"absolutePath": "units.sol",
					"exportedSymbols": {
						"Units": [
							36
						]
					},
					"id": 37,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".0",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "39:31:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Units",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 36,
							"linearizedBaseContracts": [
								36
							],
							"name": "Units",
							"nameLocation": "83:5:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 34,
										"nodeType": "Block",
										"src": "123:206:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"id": 7,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 5,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "141:9:0",
																"subdenomination": "minutes",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_60_by_1",
																	"typeString": "int_const 60"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "3630",
																"id": 6,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "154:10:0",
																"subdenomination": "seconds",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_60_by_1",
																	"typeString": "int_const 60"
																},
																"value": "60"
															},
															"src": "141:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 4,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "134:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 8,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "134:31:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 9,
												"nodeType": "ExpressionStatement",
												"src": "134:31:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															},
															"id": 13,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 11,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "183:7:0",
																"subdenomination": "hours",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_7200_by_1",
																	"typeString": "int_const 7200"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "313230",
																"id": 12,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "194:11:0",
																"subdenomination": "minutes",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_7200_by_1",
																	"typeString": "int_const 7200"
																},
																"value": "120"
															},
															"src": "183:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 10,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "176:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 14,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "176:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 15,
												"nodeType": "ExpressionStatement",
												"src": "176:30:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 17,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "224:6:0",
																"subdenomination": "days",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_86400_by_1",
																	"typeString": "int_const 86400"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "3234",
																"id": 18,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "234:8:0",
																"subdenomination": "hours",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_86400_by_1",
																	"typeString": "int_const 86400"
																},
																"value": "24"
															},
															"src": "224:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 16,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "217:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "217:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "217:26:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															"id": 25,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 23,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "263:7:0",
																"subdenomination": "ether",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31653138",
																"id": 24,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "274:8:0",
																"subdenomination": "wei",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1e18"
															},
															"src": "263:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 22,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "256:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 26,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "256:27:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 27,
												"nodeType": "ExpressionStatement",
												"src": "256:27:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															"id": 31,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 29,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "301:7:0",
																"subdenomination": "ether",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "316539",
																"id": 30,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "312:8:0",
																"subdenomination": "gwei",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1e9"
															},
															"src": "301:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 28,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "294:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 32,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "294:27:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 33,
												"nodeType": "ExpressionStatement",
												"src": "294:27:0"
											}
										]
									},
									"functionSelector": "f8a8fd6d",
									"id": 35,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "test",
									"nameLocation": "105:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "109:2:0"
									},
									"returnParameters": {
										"id": 3,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "123:0:0"
									},
									"scope": 36,
									"src": "96:233:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 37,
							"src": "74:258:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "39:293:0"
				},
				"id": 0
			}
		}
	}
}